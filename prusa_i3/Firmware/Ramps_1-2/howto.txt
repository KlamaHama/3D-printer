I originally built a clone i3 MK2S whilst waiting for my genuine MK2S to arrive.
As I could not obtain a Mini Rambo board at the time, I chose to build the clone around the popular Arduino/Ramps1.4 combination. As I wanted to use the Hictop 275x220 3mm aluminium heated bed, I also chose to go with 24V - something I have never regretted (quieter steppers and lower currents).

As all the Prusa MK2S parts are freely available under the GNU license, it was easy to modify parts to fit the clone. My first clone was soon up and running the latest Marlin firmware, and it worked extremely well. Note that all the other printable parts required to complete this printer can be found on the Prusa website.

When my genuine MK2S arrived, I soon realised that the Prusa firmware contained a lot of very user friendly modifications like Z calibration; live Z; and filament load/unload. These changes, along with my software engineering background, and the fact that the firmware source code is freely available, I set about modifying the Prusa firmware to work on the Mega2560/Ramps1.4 board.

I had some clues that it could be done quite easily from other posts, and TBH it was not that difficult, and within a few nights, I had managed to get the clone printer running the latest 3.0.12 firmware.

Note that I have used a fan extender to add software controlled case and hotend cooling fans. You can skip this and just connect the fans straight to the power connector if you are happy for them to be on all the time.

I am in the process of writing a HOWTO, but in the meantime, I have posted a file for you to try. Use the standard Prusa firmware updater to upload the hex file. You can find this file on the Prusa website.

The specs for these hex files are:
File: i3Ramps-3.0.12-A.hex
Name: "i3 MK2 Ramps"
Mode: Dual Z steppers (on Z and E1)
Steps-per-mm (X,Y,Z,E): 100, 100, 800, 143.5
Board: Ramps 1.4/Arduino MEGA 2560
X Limits: MIN Active HIGH, -2 to 212 (offset is to allow X to clear fan on controller)
Y Limits: MIN Active HIGH, -5 to 230
Z limits: MIN Active LOW, 0.15 to 210 (sensor is NPN bed level sensor).

File: i3Ramps-3.0.12-B.hex
As "A" above, but with Z limit active HIGH for normal Z limit switch.

File: Ramps-3.1.0-RC2-A.hex and Ramps-3.1.0-RC2-B.hex
The latest release candidate with Linear Advance.

All hex files assume type 5 hotend thermistor (E3dv6), and type 1 bed thermistor.

Please note that you use these files completely at your own risk. Especially note that if your printer's dimensions are not the same as mine, the limits may not work properly. If your Z is smaller than 210, then the nozzle will crash into the bed when calibrating Z - you have been warned - protect the bed when you first try calibration.

If you like my work, or have questions, please consider a small donation to my paypal account.

Finally, remember that these modifications could only be made due to the GPL nature of the Prusa printer. Please consider buying at least one printer from Prusa, to thank them for all their hard work.

How I Designed This

Here is a boiled-down "brain dump" of what I did.
Download and install latest Arduino IDE
Connect Arduino to PC and select correct board/process/port under the "Tools" menu.

Download latest Prusa MK2 firmware source

Copy in a custom pins file, "pins_ramps.h", to "Firmware".

Copy "Firmware/variants/1_75mm_MK2-RAMBo13a-E3Dv6full.h" to "Firmware/Configuration_prusa.h".

Edit "Firmware/Configuration_prusa.h".

Change name,
#define CUSTOM_MENDEL_NAME "i3 MK2 Ramps"

Change board,
#define MOTHERBOARD BOARD_RAMPS_13_EFB

Add some magic to remove PWM motor control,
#if MOTHERBOARD == BOARD_RAMPS_13_EFB
#define HAS_DIGIPOTSS false
#define HAS_MOTOR_CURRENT_PWM false
#define MOTOR_CURRENT_PWM_RANGE 0
#define DEFAULT_PWM_MOTOR_CURRENT {0, 0, 0} // {XY,Z,E}
#define DEFAULT_PWM_MOTOR_CURRENT_LOUD {0, 0, 0} // {XY,Z,E}
#define HOTENDS 1
#define MOSFET_D_PIN 4 // for MKS 1.4 board use 7 (heater 1)
#define Z_SILENT 0
#define Z_HIGH_POWER 0
#endif

Change steps-per-unit,
#define DEFAULT_AXIS_STEPS_PER_UNIT {100,100,3200/8,143.5} // {100,100,3200/8,161.3}

Change Z endstop sense (for NPN sensor)
const bool Z_MIN_ENDSTOP_INVERTING = true;

Change home and travel limits,
// Home position
#define MANUAL_X_HOME_POS -2
#define MANUAL_Y_HOME_POS -5 // -2.2
#define MANUAL_Z_HOME_POS 0.15

// Travel limits after homing
#define X_MAX_POS 212 // 250
#define X_MIN_POS -2 // 0
#define Y_MAX_POS 230 // 210
#define Y_MIN_POS -5 // -2.2
#define Z_MAX_POS 210
#define Z_MIN_POS 0.15

Change thermistor values,

#define HEATER_0_MINTEMP 5 //15
#define BED_MINTEMP 5 //15

Set extruder cooling fan pin,
#define EXTRUDER_0_AUTO_FAN_PIN FAN1_PIN // 8

Set thermistor values,
#define TEMP_SENSOR_0 5
#define TEMP_SENSOR_BED 1

Edit "Configuration_adv.h".

Change Controller fan pin (if required),
#define CONTROLLERFAN_PIN 5 //Pin used for the fan to cool controller (-1 to disable)

Set dual Z steppers, by un-commenting the appropriate line,
#define Z_DUAL_STEPPER_DRIVERS

Edit "Boards.h".

Before BOARD_99, add:
#define BOARD_RAMPS_13_EFB 33 // RAMPS 1.3 (Power outputs: Hotend, Fan, Bed)

Edit "mesh_bed_calibration.cpp"
Change positions of the bed reference points. These are the position of the nozzle not the sensor.

bed_ref_points:

0.f - BED_ZERO_REF_X, 6.4f - BED_ZERO_REF_Y,
80.f - BED_ZERO_REF_X, 6.4f - BED_ZERO_REF_Y,
160.f - BED_ZERO_REF_X, 6.4f - BED_ZERO_REF_Y,

160.f - BED_ZERO_REF_X, 104.4f - BED_ZERO_REF_Y,
80.f - BED_ZERO_REF_X, 104.4f - BED_ZERO_REF_Y,
0.f - BED_ZERO_REF_X, 104.4f - BED_ZERO_REF_Y,

0.f - BED_ZERO_REF_X, 202.4f - BED_ZERO_REF_Y,
80.f - BED_ZERO_REF_X, 202.4f - BED_ZERO_REF_Y,
160.f - BED_ZERO_REF_X, 202.4f - BED_ZERO_REF_Y

bed_ref_points_4:
80.f - BED_ZERO_REF_X, 6.4f - BED_ZERO_REF_Y,
160.f - BED_ZERO_REF_X, 104.4f - BED_ZERO_REF_Y,
80.f - BED_ZERO_REF_X, 202.4f - BED_ZERO_REF_Y,
0.f - BED_ZERO_REF_X, 104.4f - BED_ZERO_REF_Y

Edit "pins.h".

Before "#ifndef KNOWN_BOARD", add,
#include "pins_ramps.h"

......

QED
You should now be able to compile and deploy the firmware to your Ramps board.
